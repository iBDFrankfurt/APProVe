version: '3'
services:
  auth:
    #-------------------------------------------------------------------------------------
    # ==== Keycloak ====
    #-------------------------------------------------------------------------------------
    restart: always
    container_name: approve.auth
    image: ${KEYCLOAK_IMAGE}
    ports:
      - ${AUTH_PORT}:8080
    entrypoint: /opt/keycloak/bin/kc.sh start  --hostname-url=http://approve.auth:${AUTH_PORT} --health-enabled=true
    environment:
      KC_DB: postgres
      KC_DB_URL_DATABASE: ${APPROVE_AUTH_DB}
      KC_DB_URL_HOST: approve.postgres
      KC_DB_USERNAME: ${APPROVE_POSTGRES_USER}
      KC_DB_PASSWORD: ${APPROVE_POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN:  ${APPROVE_KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${APPROVE_KEYCLOAK_ADMIN_PASSWORD}
      #PROXY_ADDRESS_FORWARDING: "true"
      #KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      #KC_PROXY: "edge"
      REST_USER: ${KEYCLOAK_USER_NAME}
      REST_PASSWORD: ${KEYCLOAK_USER_PASSWORD}
      CLIENT_ID: ${KEYCLOAK_REST_CLIENT_ID}
      GRANT_TYPE: password
      KEYCLOAK_REALM: ${KEYCLOAK_REALM_NAME}
      KEYCLOAK_URL: ${APPROVE_KEYCLOAK_URL}
      BACKEND_SERVICE_URL: ${APPROVE_BACKEND_URL}
    volumes:
      #-------------------------------------------------------------------------------------
      # ==== Create and add your own login Theme and paste it like this ====
      #-------------------------------------------------------------------------------------
      - "./keycloak-themes/themes/uct:/opt/keycloak/themes/custom-theme"
      #-------------------------------------------------------------------------------------
      # ==== This SPI sends data from keycloak to the backend-service ====
      #-------------------------------------------------------------------------------------
      - "./keycloak-event-listener/target/:/opt/keycloak/providers/"
    depends_on:
      - postgres
    networks:
      - approve_network

  postgres:
    # -------------------------------------------------------------------------------------
    # ==== Database for project based objects ====
    # -------------------------------------------------------------------------------------
    restart: always
    container_name: approve.postgres
    image: ${POSTGRES_IMAGE}
    expose:
      - ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: ${APPROVE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${APPROVE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${APPROVE_AUTH_DB}
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    networks:
      - approve_network

  config-service:
    #-------------------------------------------------------------------------------------
    # ==== ENV Configurations for spring boot ====
    #-------------------------------------------------------------------------------------
    restart: always
    container_name: approve.config
    image: ${CONFIG_IMAGE}
    ports:
      - ${CONFIG_PORT}:8888
    networks:
      - approve_network

  backend-service:
    #-------------------------------------------------------------------------------------
    # ==== Project based service for APProVe, mainly handles project creation/editing ====
    #-------------------------------------------------------------------------------------
    container_name: approve.backend
    restart: always
    image: ${BACKEND_IMAGE}
    ports:
      - ${BACKEND_PORT}:8000
    environment:
      # Keycloak variables
      APPROVE_KEYCLOAK_REALM_NAME: ${KEYCLOAK_REALM_NAME}
      APPROVE_KEYCLOAK_SERVER: ${APPROVE_KEYCLOAK_URL}
      APPROVE_CLIENT_ID: ${APPROVE_CLIENT_ID}
      # Eureka variables
      APPROVE_EUREKA: ${EUREKA_URL}
      EUREKA_PREFER_IP_ADDRESS: "true"
      EUREKA_IP_ADDRESS: approve.backend
      INSTANCE_HOSTNAME: PROJECT-SERVICE
      EUREKA_URL: approve.eureka
      EUREKA_PORT: ${EUREKA_PORT}
      # Postgres variables
      POSTGRES_USER: ${APPROVE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${APPROVE_POSTGRES_PASSWORD}
      POSTGRES_URL: approve.postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      DB_NAME: ${APPROVE_PROJECT_DB}
      # Config-Service variables
      CONFIG_URL: approve.config
      CONFIG_PORT: ${CONFIG_PORT}

      APPROVE_FRONTEND_URL: ${APPROVE_FRONTEND_URL}
      JAVA_OPTS: "-XX:+UseSerialGC -XX:MaxRAM=1024m"
    depends_on:
      - postgres
      - eureka-service
      - config-service
    networks:
      - approve_network

  frontend-service:
    #-------------------------------------------------------------------------------------
    # ==== Spring Boot frontend with integrated vuejs bundle ====
    #-------------------------------------------------------------------------------------
    container_name: approve.frontend
    restart: always
    image: ${FRONTEND_IMAGE}
    ports:
      - ${FRONTEND_PORT}:8001
    environment:
      #Startup Variables
      APPROVE_KEYCLOAK_REALM_NAME: ${KEYCLOAK_REALM_NAME}
      APPROVE_KEYCLOAK_SERVER: ${APPROVE_KEYCLOAK_URL}
      APPROVE_CLIENT_ID: ${APPROVE_CLIENT_ID}
      APPROVE_EUREKA: ${EUREKA_URL}
      EUREKA_URL: approve.eureka
      EUREKA_PORT: ${EUREKA_PORT}
      CONFIG_URL: approve.config
      CONFIG_PORT: ${CONFIG_PORT}
      APPROVE_KEYCLOAK_URL: ${APPROVE_KEYCLOAK_URL}
      # Backend URLS
      APPROVE_SELF_URL: ${APPROVE_FRONTEND_URL}
      APPROVE_BACKEND_URL: ${APPROVE_BACKEND_URL}
      APPROVE_USER_URL: ${APPROVE_USER_URL}
      APPROVE_COMMENTS_URL: ${APPROVE_COMMENTS_URL}
      APPROVE_AUTOMATION_URL: ${APPROVE_AUTOMATION_URL}
      APPROVE_MAIL_URL: ${APPROVE_MAIL_URL}
      MANUAL_URL: ${APPROVE_MANUAL_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URL}
      INSTANCE_HOSTNAME: PROJECT-WEB-SERVICE
      EUREKA_PREFER_IP_ADDRESS: "true"
      EUREKA_IP_ADDRESS: approve.frontend
      FRONTEND_USER_LAYOUT: /css/approve-main.css
      FRONTEND_ADMIN_LAYOUT: /css/approve-admin.css
      APPROVE_EMAIL_URL: ${APPROVE_FRONTEND_URL}
      APPROVE_DRAFT_URL: ${APPROVE_DRAFT_URL}
      APPROVE_IMPORT_URL: ${APPROVE_IMPORT_URL}
    networks:
      - approve_network


  eureka-service:
    #-------------------------------------------------------------------------------------
    # ==== Service Registry for backends ====
    #-------------------------------------------------------------------------------------
    restart: always
    container_name: approve.eureka
    image: ${EUREKA_IMAGE}
    ports:
      - ${EUREKA_PORT}:8761
    environment:
      EUREKA_PORT: ${EUREKA_PORT}
      CONFIG_PORT: ${CONFIG_PORT}
      CONFIG_URL: config-service
      JAVA_OPTS: "-XX:+UseSerialGC -XX:MaxRAM=512m"
    depends_on:
      - config-service
    networks:
      - approve_network

  manual-service:
    #-------------------------------------------------------------------------------------
    # ==== Every APProVe instance get's its own manual ====
    #-------------------------------------------------------------------------------------
    restart: always
    container_name: approve.manual
    image: ${MANUAL_IMAGE}
    ports:
      - ${MANUAL_PORT}:443
    networks:
      - approve_network

  mongo:
    #-------------------------------------------------------------------------------------
    # ==== Database for comments/templates/automation ====
    #-------------------------------------------------------------------------------------
    restart: always
    container_name: approve.mongo
    image: ${MONGO_IMAGE}
    ports:
      - ${MONGO_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${APPROVE_MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${APPROVE_MONGO_PASSWORD}
    volumes:
      - "mongo_data:/data/db"
    networks:
      - approve_network

  user-service:
    #-------------------------------------------------------------------------------------
    # ==== Checks users and roles in keycloak ====
    #-------------------------------------------------------------------------------------
    restart: always
    container_name: approve.user
    image: ${USER_IMAGE}
    environment:
      APPROVE_KEYCLOAK_REALM_NAME: ${KEYCLOAK_REALM_NAME}
      APPROVE_KEYCLOAK_SERVER: ${APPROVE_KEYCLOAK_URL}
      APPROVE_CLIENT_ID: ${APPROVE_CLIENT_ID}
      EUREKA_URL: approve.eureka
      EUREKA_PORT: ${EUREKA_PORT}
      CONFIG_URL: approve.config
      CONFIG_PORT: ${CONFIG_PORT}
      APPROVE_EUREKA: ${EUREKA_URL}
      INSTANCE_HOSTNAME: USER-SERVICE
      EUREKA_PREFER_IP_ADDRESS: "true"
      EUREKA_IP_ADDRESS: approve.user
      APPROVE_KEYCLOAK_USER_NAME: ${KEYCLOAK_USER_NAME}
      APPROVE_KEYCLOAK_USER_PASSWORD: ${KEYCLOAK_USER_PASSWORD}
      APPROVE_KEYCLOAK_CLIENTID: ${APPROVE_CLIENT_ID}
    ports:
      - ${USER_PORT}:9001
    networks:
      - approve_network

  comments-service:
    #-------------------------------------------------------------------------------------
    # ==== Mainly CRUD service in golang for comments ====
    #-------------------------------------------------------------------------------------
    restart: always
    image: ${COMMENT_IMAGE}
    container_name: approve.comment
    ports:
      - ${COMMENT_PORT}:3234
    environment:
      COMMENTS_PORT: ${COMMENT_PORT}
      COMMENTS_HOST:
      MONGO_PORT: ${MONGO_PORT}
      MONGO_HOST: ${MONGO_URL}
      MONGO_USERNAME: ${APPROVE_MONGO_USER}
      MONGO_PASSWORD: ${APPROVE_MONGO_PASSWORD}
      MONGO_AUTH: "true"
      REGISTER_WITH_EUREKA: "true"
      EUREKA_HOST: ${EUREKA_URL}
      EUREKA_SERVICE_NAME: "COMMENTS-SERVICE"
      CHECK_TOKEN_URL: ${APPROVE_KEYCLOAK_URL}/realms/${KEYCLOAK_REALM_NAME}/protocol/openid-connect/userinfo
      IS_LOCAL: "false"
    networks:
      - approve_network

  mail-service:
    #-------------------------------------------------------------------------------------
    # ==== Mainly CRUD service in golang for emails and templates ====
    #-------------------------------------------------------------------------------------
    restart: always
    image: ${EMAIL_IMAGE}
    container_name: approve.mails
    ports:
      - ${EMAIL_PORT}:4234
    environment:
      MAILS_PORT: ${EMAIL_PORT}
      MAILS_HOST:
      MONGO_PORT: ${MONGO_PORT}
      MONGO_HOST: ${MONGO_URL}
      MONGO_USERNAME: ${APPROVE_MONGO_USER}
      MONGO_PASSWORD: ${APPROVE_MONGO_PASSWORD}
      MONGO_AUTH: "true"
      REGISTER_WITH_EUREKA: "true"
      EUREKA_HOST: ${EUREKA_URL}
      EUREKA_SERVICE_NAME: "MAIL-SERVICE"
      CHECK_TOKEN_URL: ${APPROVE_KEYCLOAK_URL}/realms/${KEYCLOAK_REALM_NAME}/protocol/openid-connect/userinfo
      IS_LOCAL: "false"
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    networks:
      - approve_network

  automation-service:
    #-------------------------------------------------------------------------------------
    # ==== Mainly CRUD service in golang for project based automation ====
    #-------------------------------------------------------------------------------------
    restart: always
    container_name: approve.automation
    image: ${AUTOMATIOM_IMAGE}
    ports:
      - ${AUTOMATION_PORT}:3233
    environment:
      RULES_PORT: ${AUTOMATION_PORT}
      RULES_HOST:
      MONGO_PORT: ${MONGO_PORT}
      MONGO_HOST: ${MONGO_URL}
      MONGO_USERNAME: ${APPROVE_MONGO_USER}
      MONGO_PASSWORD: ${APPROVE_MONGO_PASSWORD}
      MONGO_AUTH: "true"
      REGISTER_WITH_EUREKA: "true"
      EUREKA_HOST: ${EUREKA_URL}
      EUREKA_SERVICE_NAME: "AUTOMATION-SERVICE"
      EUREKA_IP_ADDRESS_FOR_SERVICE: "AUTOMATION-SERVICE"
      CHECK_TOKEN_URL: ${APPROVE_KEYCLOAK_URL}/realms/${KEYCLOAK_REALM_NAME}/protocol/openid-connect/userinfo
      IS_LOCAL: "false"
    networks:
      - approve_network

  import-service:
    restart: always
    container_name: approve.import
    image: ${IMPORT_IMAGE}
    ports:
      - ${IMPORT_PORT}:8003
    environment:
      APPROVE_KEYCLOAK_REALM_NAME: ${KEYCLOAK_REALM_NAME}
      APPROVE_KEYCLOAK_SERVER: ${APPROVE_KEYCLOAK_URL}
      APPROVE_CLIENT_ID: ${APPROVE_CLIENT_ID}
      APPROVE_EUREKA: ${EUREKA_URL}
      EUREKA_PREFER_IP_ADDRESS: "true"
      EUREKA_IP_ADDRESS: approve.import
      INSTANCE_HOSTNAME: IMPORT-SERVICE
      INSTANCE_PORT: ${IMPORT_PORT}
      POSTGRES_USER: ${APPROVE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${APPROVE_POSTGRES_PASSWORD}
      POSTGRES_URL: approve.postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      EUREKA_URL: approve.eureka
      EUREKA_PORT: ${EUREKA_PORT}
      CONFIG_URL: approve.config
      CONFIG_PORT: ${CONFIG_PORT}
      JAVA_OPTS: "-XX:+UseSerialGC -XX:MaxRAM=1024m"
      DB_NAME: ${APPROVE_PROJECT_DB}
      SPRING_DATASOURCE_URL: jdbc:postgresql://approve.postgres/${APPROVE_PROJECT_DB}
    networks:
      - approve_network

  draft-service:
    restart: always
    container_name: approve.draft
    image: ${DRAFT_IMAGE}
    ports:
      - ${DRAFT_PORT}:8002
    environment:
      APPROVE_KEYCLOAK_REALM_NAME: ${KEYCLOAK_REALM_NAME}
      APPROVE_KEYCLOAK_SERVER: ${APPROVE_KEYCLOAK_URL}
      APPROVE_CLIENT_ID: ${APPROVE_CLIENT_ID}
      APPROVE_EUREKA: ${EUREKA_URL}
      EUREKA_PREFER_IP_ADDRESS: "true"
      EUREKA_IP_ADDRESS: approve.draft
      INSTANCE_HOSTNAME: DRAFT-SERVICE
      INSTANCE_PORT: ${DRAFT_PORT}
      POSTGRES_USER: ${APPROVE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${APPROVE_POSTGRES_PASSWORD}
      POSTGRES_URL: approve.postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      EUREKA_URL: approve.eureka
      EUREKA_PORT: ${EUREKA_PORT}
      CONFIG_URL: approve.config
      CONFIG_PORT: ${CONFIG_PORT}
      JAVA_OPTS: "-XX:+UseSerialGC -XX:MaxRAM=1024m"
      DB_NAME: ${APPROVE_PROJECT_DB}
    networks:
      - approve_network

networks:
  approve_network:
    external: true

volumes:
  postgres_data:
  mongo_data:
